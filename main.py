from matplotlib import pyplot as plt
import openai
import time
from openai import OpenAI
import json
import base64
import requests
import cv2
from nltk.tokenize import word_tokenize
from tabulate import tabulate
from functions import  drawing_boxes, extract_coordinates_gpt4,calculate_image_tokens, calculate_iou,calculate_cost
#nltk.download('punkt')  # Ensure the tokenizer is downloaded
from nltk.translate.meteor_score import meteor_score
from nltk.translate.bleu_score import sentence_bleu, SmoothingFunction
# OpenAI API Key
api_key = "WRITE YOUR OWN KEY"

# Function to encode the image
def encode_image(image_path):
  with open(image_path, "rb") as image_file:
    return base64.b64encode(image_file.read()).decode('utf-8')
f = open('GPT4_data.txt', 'a')

query = (
    "Describe in detail the main objects present in the picture."
    "ensure that each object is reported only once."
    "Provide the result in a JSON format where each object has 'name' keys and the JSON object has the name 'objects'. Do not write the word 'json' after ``` at the beginning of the json format"
)

#image_path = "gt_bordny8_ny.jpg"
#image_path = "gt_ordning11.jpg"
#image_path = "gt_ordning12.jpg"
image_path = "gt_ordning13.jpg"
img = cv2.imread(image_path)
input_image = open(f"{image_path}", "rb")
# Getting the base64 string

#######============================= START OF THE MODEL GPT4 - VISION ==========================#####
base64_image = encode_image(image_path)
start = time.time()
headers = {
  "Content-Type": "application/json",
  "Authorization": f"Bearer {api_key}"
}
payload = {
  "model": "gpt-4-turbo",
  "messages": [
    {
      "role": "user",
      "content": [
        {
          "type": "text",
          "text": query
        },
        {
          "type": "image_url",
          "image_url": {
            "url": f"data:image/jpeg;base64,{base64_image}"
          }
        }
      ]
    }
  ],
  "temperature":0.10,
  "max_tokens": 300
  
}


response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=payload)
end = time.time()
print(response.json())
######=========================== END OF THE MODEL GPT4 - VISION ====================================#############

temp_json = response.json()
#in candidate stores the text generated by the model
candidate = temp_json['choices'][0]['message']['content']
print("\nOutput message: ",candidate)

###============================== PRINTING THE ANSWEAR IN JSON FORMAT ======================######
new_res = candidate.replace('json', '').replace("```", "")
print(f"\n {new_res}")
with open("sample.json", "w") as file:
    file.write(new_res)

with open("sample.json", "r") as in_file:
    json_object = json.load(in_file)

print(json_object)
####========================= END OF PRINTING THE ANSWEAR IN JSON FORMAT ===================######

coordinates=[[293, 333, 478, 492], [352, 482, 468, 573], [282, 474, 335, 577], [203, 443, 248, 531], [145, 453, 189, 534], [126, 446, 164, 522], [137, 416, 536, 627], [306, 77, 401, 160], [185, 82, 287, 158], [72, 0, 565, 178]]
####================ END DRAWING THE GROUND TRUTH BOUNDING BOXES ==========############




###============= CALCULATING THE AMOUNT OF THE TOKEN COST =====####
image_height, image_width = img.shape[0], img.shape[1]
print(calculate_image_tokens(image_width,image_height) , "Tokens")
tokens_img = calculate_image_tokens(image_width,image_height)
cost = calculate_cost(image_width,image_height)
###============= END OF CALCULATING THE AMOUNT OF THE TOKEN COST =====####
time_exec = end - start
print("time of execution: ", time_exec )


f.write(f"\nimage: {image_path}, below are the measures for this image using the model LLaVA\n")
f.write("\nQuery: " + query + "\n")
#f.write("\nReference text provided by the user:\n" + reference +"\n")
f.write("Candidate text provided by the modell:\n" + candidate + "\n")
f.write("Execution time: " + repr(time_exec)+ "second\n")
f.write("json object response: " + repr(json_object))

mydata = [
    ["Execution time", f"{time_exec}"], 
    ["cost of the picture: ", f"{cost}"],
]
 
# create header
head = [f"{image_path}","GPT4 Turbo Vision"]
print(tabulate(mydata, headers=head, tablefmt="grid"))
f.write(tabulate(mydata, headers=head, tablefmt="grid"))
